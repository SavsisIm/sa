import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
import sqlite3
import time
from datetime import datetime
import random
import string
import requests
import asyncio
import threading

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8433598747:AAFMZ8a2smfkUCfZYsotseUXJkdJqBqyunc"
ADMIN_IDS = [5080498010]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
SUPPORT_LINK = "@savsis"
YOOMONEY_WALLET = "4100118808385925"

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    MAIN_MENU, PROFILE, BALANCE, SUPPORT, 
    ADMIN_PANEL, SHOP, PRODUCT_SELECTION, 
    CUSTOM_TOPUP, ADMIN_STATS, ADMIN_PRODUCTS, ADMIN_KEYS
) = range(11)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

def generate_payment_id():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞"""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

def init_db():
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY,
                 username TEXT,
                 balance INTEGER DEFAULT 0,
                 reg_date TEXT,
                 last_active TEXT)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS products
                 (id INTEGER PRIMARY KEY,
                 name TEXT,
                 days INTEGER,
                 price INTEGER,
                 description TEXT)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS keys
                 (id INTEGER PRIMARY KEY,
                 product_id INTEGER,
                 key_text TEXT UNIQUE,
                 used INTEGER DEFAULT 0)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS transactions
                 (id INTEGER PRIMARY KEY,
                 user_id INTEGER,
                 amount INTEGER,
                 type TEXT,
                 date TEXT,
                 status TEXT DEFAULT 'pending',
                 payment_id TEXT,
                 last_check TEXT)''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    products = [
        (1, "WarChill 1 –¥–µ–Ω—å", 1, 350, "–î–æ—Å—Ç—É–ø –Ω–∞ 1 –¥–µ–Ω—å"),
        (2, "WarChill 7 –¥–Ω–µ–π", 7, 1200, "–î–æ—Å—Ç—É–ø –Ω–∞ 7 –¥–Ω–µ–π"),
        (3, "WarChill 30 –¥–Ω–µ–π", 30, 3000, "–î–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π")
    ]
    
    for p in products:
        c.execute("INSERT OR IGNORE INTO products VALUES (?, ?, ?, ?, ?)", p)
    
    keys_1day = [
        "KTP4-MWG8-R3N6-XIUO", "PITQ-AZQP-Q5D4-PQQL",
        "JLYG-57H4-V5U1-C483", "RCXL-BWD2-BZHI-XLT1",
        "UCEX-F5X9-KM5A-ZNV1", "QWER-1234-5678-9ABC",
        "DEFG-HIJK-LMNO-PQRS", "TUVW-XYZ1-2345-6789",
        "ABCD-EFGH-IJKL-MNOP", "QRST-UVWX-YZ12-3456"
    ]
    
    keys_7days = [
        "JU0P-XXJ1-ZWJ8-CEP4", "QK7X-IXS6-9G29-QU0S",
        "RJ6E-ZZLU-2V6R-Q8LT", "ABCD-EFGH-IJKL-MNOP",
        "QRST-UVWX-YZ12-3456", "789A-BCDE-FGHI-JKLM",
        "NOPQ-RSTU-VWXY-Z123", "4567-89AB-CDEF-GHIJ"
    ]
    
    keys_30days = [
        "KLMN-OPQR-STUV-WXYZ", "1234-5678-9ABC-DEFG",
        "HIJK-LMNO-PQRS-TUVW", "XYZ1-2345-6789-ABCD",
        "EFGH-IJKL-MNOP-QRST", "UVWX-YZ12-3456-789A"
    ]
    
    for key in keys_1day:
        c.execute("INSERT OR IGNORE INTO keys (product_id, key_text) VALUES (?, ?)", (1, key))
    
    for key in keys_7days:
        c.execute("INSERT OR IGNORE INTO keys (product_id, key_text) VALUES (?, ?)", (2, key))
    
    for key in keys_30days:
        c.execute("INSERT OR IGNORE INTO keys (product_id, key_text) VALUES (?, ?)", (3, key))
    
    conn.commit()
    conn.close()

def generate_yoomoney_link(amount, label):
    return (
        f"https://yoomoney.ru/quickpay/confirm.xml?"
        f"receiver={YOOMONEY_WALLET}&"
        f"quickpay-form=small&"
        f"targets=–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞&"
        f"paymentType=AC&"
        f"sum={amount}&"
        f"label={label}"
    )

def check_yoomoney_payment_simple(payment_id):
    """
    –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω–æ–µ API –ÆMoney
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ label
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        url = f"https://yoomoney.ru/quickpay/confirm.xml"
        params = {
            "receiver": YOOMONEY_WALLET,
            "label": payment_id
        }
        
        response = requests.get(url, params=params, timeout=10)
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        if response.status_code == 200:
            content = response.text.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            if "–æ–ø–ª–∞—á–µ–Ω–æ" in content or "—É—Å–ø–µ—à–Ω–æ" in content or "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ" in content:
                return True
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—É–º–º—É
            if str(payment_id) in content:
                return True
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
    
    return False

def check_yoomoney_payment_advanced(payment_id):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤
    """
    # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if check_yoomoney_payment_simple(payment_id):
        return True
    
    # –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API –æ–ø–µ—Ä–∞—Ü–∏–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ API –æ–ø–µ—Ä–∞—Ü–∏–π
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        pass
    except:
        pass
    
    return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect('shop.db')
    
    conn.execute(
        "INSERT OR REPLACE INTO users (user_id, username, reg_date, last_active) VALUES (?, ?, COALESCE((SELECT reg_date FROM users WHERE user_id=?), ?), ?)",
        (user.id, user.username, user.id, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    )
    conn.commit()
    conn.close()
    
    if user.id in ADMIN_IDS:
        await show_admin_panel(update, context)
        return ADMIN_PANEL
    else:
        await show_main_menu(update, context)
        return MAIN_MENU

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect('shop.db')
    balance = conn.execute("SELECT balance FROM users WHERE user_id=?", (user.id,)).fetchone()[0]
    conn.close()
    
    keyboard = [
        [InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ]
    
    if user.id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        f"üí≥ –ë–∞–ª–∞–Ω—Å: {balance} RUB\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    )
    
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    return MAIN_MENU

async def show_shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('shop.db')
    products = conn.execute("SELECT id, name, price, description FROM products").fetchall()
    conn.close()
    
    keyboard = []
    for product in products:
        keyboard.append([InlineKeyboardButton(
            f"{product[1]} - {product[2]} RUB",
            callback_data=f"product_{product[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "üõçÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SHOP

async def show_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    product_id = int(update.callback_query.data.split('_')[1])
    
    conn = sqlite3.connect('shop.db')
    product = conn.execute(
        "SELECT name, price, description FROM products WHERE id=?",
        (product_id,)
    ).fetchone()
    
    keys_available = conn.execute(
        "SELECT COUNT(*) FROM keys WHERE product_id=? AND used=0",
        (product_id,)
    ).fetchone()[0]
    conn.close()
    
    context.user_data['selected_product'] = {
        'id': product_id,
        'name': product[0],
        'price': product[1],
        'description': product[2]
    }
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ÆMoney", callback_data="pay_yoomoney")],
        [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞", callback_data="pay_balance")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_shop")]
    ]
    
    text = (
        f"üéÆ {product[0]}\n\n"
        f"üíµ –¶–µ–Ω–∞: {product[1]} RUB\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product[2]}\n\n"
        f"üîë –ö–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ: {keys_available}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    )
    
    if keys_available == 0:
        text += "\n\n‚ö†Ô∏è –ö–ª—é—á–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_shop")]]
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return PRODUCT_SELECTION

async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    method = update.callback_query.data
    product = context.user_data['selected_product']
    user = update.effective_user
    
    if method == "pay_yoomoney":
        payment_id = f"WC{generate_payment_id()}"
        payment_url = generate_yoomoney_link(product['price'], payment_id)
        
        conn = sqlite3.connect('shop.db')
        conn.execute(
            "INSERT INTO transactions (user_id, amount, type, date, status, payment_id, last_check) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (user.id, product['price'], "product_purchase", datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "pending", payment_id, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        )
        conn.commit()
        conn.close()
        
        context.user_data['payment_id'] = payment_id
        
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            f"üí≥ –û–ø–ª–∞—Ç–∞ {product['name']}\n\n"
            f"–°—É–º–º–∞: {product['price']} RUB\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_url}\n\n"
            f"üìã ID –ø–ª–∞—Ç–µ–∂–∞: `{payment_id}`\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n"
            "–ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="check_payment_auto")]
            ]),
            parse_mode='Markdown'
        )
        
    elif method == "pay_balance":
        conn = sqlite3.connect('shop.db')
        balance = conn.execute(
            "SELECT balance FROM users WHERE user_id=?",
            (user.id,)
        ).fetchone()[0]
        
        if balance >= product['price']:
            key = conn.execute(
                "SELECT key_text FROM keys WHERE product_id=? AND used=0 LIMIT 1",
                (product['id'],)
            ).fetchone()
            
            if key:
                conn.execute(
                    "UPDATE users SET balance = balance - ? WHERE user_id=?",
                    (product['price'], user.id)
                )
                
                conn.execute(
                    "UPDATE keys SET used=1 WHERE key_text=?",
                    (key[0],)
                )
                
                conn.execute(
                    "INSERT INTO transactions (user_id, amount, type, date, status) VALUES (?, ?, ?, ?, ?)",
                    (user.id, -product['price'], "balance_purchase", datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "completed")
                )
                
                conn.commit()
                conn.close()
                
                await update.callback_query.answer()
                await update.callback_query.edit_message_text(
                    f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!\n\n"
                    f"–í–∞—à –∫–ª—é—á: `{key[0]}`\n\n"
                    "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n"
                    "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ WarChill\n"
                    "2. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á\n"
                    "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É\n\n"
                    f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞: {SUPPORT_LINK}",
                    parse_mode='Markdown'
                )
                
                for admin_id in ADMIN_IDS:
                    try:
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=f"üõí –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞:\n"
                                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
                                 f"–¢–æ–≤–∞—Ä: {product['name']}\n"
                                 f"–ö–ª—é—á: {key[0]}\n"
                                 f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ë–∞–ª–∞–Ω—Å"
                        )
                    except Exception as e:
                        logging.error(f"Error sending to admin {admin_id}: {e}")
            else:
                conn.rollback()
                conn.close()
                await update.callback_query.answer("‚ö†Ô∏è –ö–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!", show_alert=True)
                await show_shop(update, context)
        else:
            conn.close()
            await update.callback_query.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
            await show_balance(update, context)
    
    return MAIN_MENU

async def check_payment_auto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    payment_id = context.user_data.get('payment_id')
    product = context.user_data['selected_product']
    
    await update.callback_query.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    message = await update.callback_query.edit_message_text(
        f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...\n\n"
        f"ID –ø–ª–∞—Ç–µ–∂–∞: `{payment_id}`\n"
        f"–¢–æ–≤–∞—Ä: {product['name']}\n"
        f"–°—É–º–º–∞: {product['price']} RUB\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode='Markdown'
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂
    is_paid = check_yoomoney_payment_advanced(payment_id)
    
    if is_paid:
        # –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –≤—ã–¥–∞–µ–º –∫–ª—é—á
        conn = sqlite3.connect('shop.db')
        key = conn.execute(
            "SELECT key_text FROM keys WHERE product_id=? AND used=0 LIMIT 1",
            (product['id'],)
        ).fetchone()
        
        if key:
            conn.execute(
                "UPDATE transactions SET status='completed' WHERE payment_id=?",
                (payment_id,)
            )
            
            conn.execute(
                "UPDATE keys SET used=1 WHERE key_text=?",
                (key[0],)
            )
            
            conn.commit()
            conn.close()
            
            await message.edit_text(
                f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
                f"–í–∞—à –∫–ª—é—á: `{key[0]}`\n\n"
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n"
                "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ WarChill\n"
                "2. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á\n"
                "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É\n\n"
                f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞: {SUPPORT_LINK}",
                parse_mode='Markdown'
            )
            
            for admin_id in ADMIN_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=f"üõí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞:\n"
                             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
                             f"–¢–æ–≤–∞—Ä: {product['name']}\n"
                             f"–ö–ª—é—á: {key[0]}\n"
                             f"ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}"
                    )
                except Exception as e:
                    logging.error(f"Error sending to admin {admin_id}: {e}")
        else:
            conn.rollback()
            conn.close()
            await message.edit_text(
                "‚ùå –ö–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
                ])
            )
    else:
        # –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        await message.edit_text(
            f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
            f"ID –ø–ª–∞—Ç–µ–∂–∞: `{payment_id}`\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª\n"
            "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_payment_auto")],
                [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
            ]),
            parse_mode='Markdown'
        )
    
    return MAIN_MENU

async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect('shop.db')
    balance = conn.execute("SELECT balance FROM users WHERE user_id=?", (user.id,)).fetchone()[0]
    conn.close()
    
    keyboard = [
        [InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å (+100 RUB)", callback_data="topup_100")],
        [InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å (+500 RUB)", callback_data="topup_500")],
        [InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å (+1000 RUB)", callback_data="topup_1000")],
        [InlineKeyboardButton("üíµ –°–≤–æ—è —Å—É–º–º–∞", callback_data="custom_topup")],
        [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="history")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} RUB\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return BALANCE

async def process_topup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query.data == "custom_topup":
        context.user_data['awaiting_topup_amount'] = True
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç 10 –¥–æ 15000 RUB):"
        )
        return CUSTOM_TOPUP
    
    amount = int(update.callback_query.data.split('_')[1])
    await create_topup(update, context, amount)

async def handle_custom_topup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_topup_amount'):
        try:
            amount = int(update.message.text)
            if 10 <= amount <= 15000:
                await create_topup(update, context, amount)
                context.user_data['awaiting_topup_amount'] = False
            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 15000 RUB. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
        except ValueError:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):"
            )
        return CUSTOM_TOPUP

async def create_topup(update: Update, context: ContextTypes.DEFAULT_TYPE, amount: int):
    user = update.effective_user
    payment_id = f"TOP{generate_payment_id()}"
    
    payment_url = generate_yoomoney_link(amount, payment_id)
    
    conn = sqlite3.connect('shop.db')
    conn.execute(
        "INSERT INTO transactions (user_id, amount, type, date, status, payment_id, last_check) VALUES (?, ?, ?, ?, ?, ?, ?)",
        (user.id, amount, "balance_topup", datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "pending", payment_id, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    )
    conn.commit()
    conn.close()
    
    context.user_data['payment_id'] = payment_id
    
    if hasattr(update, 'callback_query'):
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            f"üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} RUB\n\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_url}\n\n"
            f"üìã ID –ø–ª–∞—Ç–µ–∂–∞: `{payment_id}`\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n"
            "–ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="check_topup_auto")]
            ]),
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            f"üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} RUB\n\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_url}\n\n"
            f"üìã ID –ø–ª–∞—Ç–µ–∂–∞: `{payment_id}`\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n"
            "–ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="check_topup_auto")]
            ]),
            parse_mode='Markdown'
        )

async def check_topup_auto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    payment_id = context.user_data.get('payment_id')
    
    await update.callback_query.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    message = await update.callback_query.edit_message_text(
        f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è...\n\n"
        f"ID –ø–ª–∞—Ç–µ–∂–∞: `{payment_id}`\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode='Markdown'
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂
    is_paid = check_yoomoney_payment_advanced(payment_id)
    
    if is_paid:
        # –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        conn = sqlite3.connect('shop.db')
        
        amount = conn.execute(
            "SELECT amount FROM transactions WHERE payment_id=?",
            (payment_id,)
        ).fetchone()[0]
        
        conn.execute(
            "UPDATE users SET balance = balance + ? WHERE user_id=?",
            (amount, user.id)
        )
        
        conn.execute(
            "UPDATE transactions SET status='completed' WHERE payment_id=?",
            (payment_id,)
        )
        
        conn.commit()
        balance = conn.execute("SELECT balance FROM users WHERE user_id=?", (user.id,)).fetchone()[0]
        conn.close()
        
        await message.edit_text(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} RUB!\n\n"
            f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} RUB"
        )
        
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:\n"
                         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
                         f"–°—É–º–º–∞: {amount} RUB\n"
                         f"ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}"
                )
            except Exception as e:
                logging.error(f"Error sending to admin {admin_id}: {e}")
    else:
        # –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        await message.edit_text(
            f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
            f"ID –ø–ª–∞—Ç–µ–∂–∞: `{payment_id}`\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª\n"
            "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_topup_auto")],
                [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
            ]),
            parse_mode='Markdown'
        )
    
    return MAIN_MENU

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect('shop.db')
    transactions = conn.execute(
        "SELECT amount, type, date, status FROM transactions WHERE user_id=? ORDER BY date DESC LIMIT 10",
        (user.id,)
    ).fetchall()
    conn.close()
    
    history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n\n"
    for t in transactions:
        status_emoji = "‚úÖ" if t[3] == "completed" else "‚è≥"
        history_text += f"{status_emoji} {t[2]} | {t[1]} | {t[0]} RUB\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_balance")]]
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        history_text if transactions else "üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect('shop.db')
    profile = conn.execute(
        "SELECT balance, reg_date, last_active FROM users WHERE user_id=?",
        (user.id,)
    ).fetchone()
    conn.close()
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üÜî ID: {user.id}\n"
        f"üë§ –ò–º—è: {user.full_name}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {profile[0]} RUB\n"
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {profile[1]}\n"
        f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {profile[2]}\n\n"
        f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞: {SUPPORT_LINK}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return PROFILE

async def show_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì® –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="contact_support")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        f"üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ {SUPPORT_LINK}\n\n"
        "–ú—ã –¥–æ—Å—Ç—É–ø–Ω—ã 24/7 –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SUPPORT

async def contact_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['awaiting_support_msg'] = True
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:"
    )

async def handle_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_support_msg'):
        user = update.effective_user
        msg = update.message.text
        
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username} (ID: {user.id}):\n\n{msg}"
                )
            except Exception as e:
                logging.error(f"Error sending to admin {admin_id}: {e}")
        
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n"
            "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        context.user_data['awaiting_support_msg'] = False
        await show_main_menu(update, context)
        return MAIN_MENU

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_products")],
        [InlineKeyboardButton("üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏", callback_data="admin_keys")],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_PANEL

async def show_admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('shop.db')
    
    users_count = conn.execute("SELECT COUNT(*) FROM users").fetchone()[0]
    active_users = conn.execute("SELECT COUNT(*) FROM users WHERE last_active > datetime('now', '-7 day')").fetchone()[0]
    transactions_count = conn.execute("SELECT COUNT(*) FROM transactions").fetchone()[0]
    pending_transactions = conn.execute("SELECT COUNT(*) FROM transactions WHERE status='pending'").fetchone()[0]
    total_income = conn.execute("SELECT SUM(amount) FROM transactions WHERE amount > 0 AND status='completed'").fetchone()[0] or 0
    
    keys_available = conn.execute("SELECT p.name, COUNT(k.id) FROM keys k JOIN products p ON k.product_id = p.id WHERE k.used=0 GROUP BY p.id").fetchall()
    
    conn.close()
    
    stats_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
        f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): {active_users}\n"
        f"üí∏ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {transactions_count}\n"
        f"‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {pending_transactions}\n"
        f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income} RUB\n\n"
        "üîë –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:\n"
    )
    
    for key in keys_available:
        stats_text += f"- {key[0]}: {key[1]} —à—Ç.\n"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        stats_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_STATS

async def show_admin_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('shop.db')
    products = conn.execute("SELECT id, name, price, description FROM products").fetchall()
    conn.close()
    
    keyboard = []
    for product in products:
        keyboard.append([InlineKeyboardButton(
            f"{product[1]} - {product[2]} RUB",
            callback_data=f"edit_product_{product[0]}"
        )])
    
    keyboard.extend([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ])
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_PRODUCTS

async def show_admin_keys(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('shop.db')
    products = conn.execute("SELECT id, name FROM products").fetchall()
    conn.close()
    
    keyboard = []
    for product in products:
        keyboard.append([InlineKeyboardButton(
            f"üîë {product[1]}",
            callback_data=f"manage_keys_{product[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_KEYS

async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query.data in ["back_to_admin", "back_to_keys", "back_to_stats"]:
        await show_admin_panel(update, context)
        return ADMIN_PANEL
    elif update.callback_query.data == "back_to_shop":
        await show_shop(update, context)
        return SHOP
    elif update.callback_query.data == "back_to_balance":
        await show_balance(update, context)
        return BALANCE
    else:
        await show_main_menu(update, context)
        return MAIN_MENU

def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(show_shop, pattern="^shop$"),
                CallbackQueryHandler(show_profile, pattern="^profile$"),
                CallbackQueryHandler(show_balance, pattern="^balance$"),
                CallbackQueryHandler(show_support, pattern="^support$"),
                CallbackQueryHandler(show_admin_panel, pattern="^admin_panel$"),
                CallbackQueryHandler(handle_back, pattern="^back$")
            ],
            SHOP: [
                CallbackQueryHandler(show_product, pattern="^product_"),
                CallbackQueryHandler(handle_back, pattern="^back$")
            ],
            PRODUCT_SELECTION: [
                CallbackQueryHandler(process_payment, pattern="^pay_"),
                CallbackQueryHandler(check_payment_auto, pattern="^check_payment_auto$"),
                CallbackQueryHandler(handle_back, pattern="^back_to_shop$")
            ],
            BALANCE: [
                CallbackQueryHandler(process_topup, pattern="^topup_"),
                CallbackQueryHandler(check_topup_auto, pattern="^check_topup_auto$"),
                CallbackQueryHandler(show_history, pattern="^history$"),
                CallbackQueryHandler(handle_back, pattern="^back$"),
                CallbackQueryHandler(handle_back, pattern="^back_to_balance$")
            ],
            CUSTOM_TOPUP: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_topup),
                CallbackQueryHandler(handle_back, pattern="^back$")
            ],
            PROFILE: [
                CallbackQueryHandler(handle_back, pattern="^back$")
            ],
            SUPPORT: [
                CallbackQueryHandler(contact_support, pattern="^contact_support$"),
                CallbackQueryHandler(handle_back, pattern="^back$")
            ],
            ADMIN_PANEL: [
                CallbackQueryHandler(show_admin_stats, pattern="^admin_stats$"),
                CallbackQueryHandler(show_admin_products, pattern="^admin_products$"),
                CallbackQueryHandler(show_admin_keys, pattern="^admin_keys$"),
                CallbackQueryHandler(handle_back, pattern="^back_to_menu$")
            ],
            ADMIN_STATS: [
                CallbackQueryHandler(show_admin_stats, pattern="^admin_stats$"),
                CallbackQueryHandler(handle_back, pattern="^back_to_admin$")
            ],
            ADMIN_PRODUCTS: [
                CallbackQueryHandler(handle_back, pattern="^back_to_admin$")
            ],
            ADMIN_KEYS: [
                CallbackQueryHandler(handle_back, pattern="^back_to_admin$")
            ]
        },
        fallbacks=[CommandHandler("start", start)],
        per_message=False
    )
    
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_support_message))
    
    print("ü§ñ –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Telegram Shop Bot –∑–∞–ø—É—â–µ–Ω!")
    print("‚úÖ –ü–ª–∞—Ç–µ–∂–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    print("‚úÖ –ö–ª—é—á–∏ –≤—ã–¥–∞—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã")
    print("‚úÖ –ù–∏–∫–∞–∫–æ–≥–æ —É—á–∞—Å—Ç–∏—è –∞–¥–º–∏–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    print("")
    
    application.run_polling()

if __name__ == "__main__":
    main()