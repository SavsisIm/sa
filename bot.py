import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
import sqlite3
import uuid
import time
from datetime import datetime
import requests
import base64
from http.server import BaseHTTPRequestHandler, HTTPServer
import threading
import webbrowser

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8433598747:AAFMZ8a2smfkUCfZYsotseUXJkdJqBqyunc"
ADMIN_IDS = [5080498010]
SUPPORT_LINK = "@savsis"
YOOMONEY_WALLET = "4100118808385925"
YOOMONEY_CLIENT_ID = "096257E21E2151ABB89C4D4EEE151189774A14E3F40AE665D9E033FB410BE83E"
YOOMONEY_CLIENT_SECRET = "your_client_secret"
YOOMONEY_REDIRECT_URI = "http://localhost:8080/callback"
YOOMONEY_ACCESS_TOKEN = None
LOCAL_SERVER_PORT = 8080

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    MAIN_MENU, PROFILE, BALANCE, SUPPORT, 
    ADMIN_PANEL, SHOP, PRODUCT_SELECTION, 
    PAYMENT_METHOD, CUSTOM_TOPUP, ADMIN_STATS,
    ADMIN_PRODUCTS, ADMIN_KEYS
) = range(12)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

class YooMoneyCallbackHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path.startswith('/callback'):
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(b"<html><body><h1>Authorization successful! You can close this page.</h1></body></html>")
            code = self.path.split('code=')[1].split('&')[0]
            get_access_token(code)
            threading.Thread(target=self.server.shutdown, daemon=True).start()

def run_local_server():
    server = HTTPServer(('localhost', LOCAL_SERVER_PORT), YooMoneyCallbackHandler)
    server.serve_forever()

def yoomoney_auth():
    auth_url = (
        f"https://yoomoney.ru/oauth/authorize?"
        f"client_id={YOOMONEY_CLIENT_ID}&"
        f"response_type=code&"
        f"redirect_uri={YOOMONEY_REDIRECT_URI}&"
        f"scope=operation-history"
    )
    
    print(f"–û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_url}")
    webbrowser.open(auth_url)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è callback
    server_thread = threading.Thread(target=run_local_server, daemon=True)
    server_thread.start()

def get_access_token(auth_code):
    global YOOMONEY_ACCESS_TOKEN
    auth = base64.b64encode(f"{YOOMONEY_CLIENT_ID}:{YOOMONEY_CLIENT_SECRET}".encode()).decode()
    headers = {
        "Authorization": f"Basic {auth}",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    data = {
        "code": auth_code,
        "client_id": YOOMONEY_CLIENT_ID,
        "grant_type": "authorization_code",
        "redirect_uri": YOOMONEY_REDIRECT_URI
    }
    
    response = requests.post(
        "https://yoomoney.ru/oauth/token",
        headers=headers,
        data=data
    )
    
    if response.status_code == 200:
        YOOMONEY_ACCESS_TOKEN = response.json().get("access_token")
        logging.info("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ API –ÆMoney!")
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")

def check_yoomoney_payment(label):
    if not YOOMONEY_ACCESS_TOKEN:
        logging.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω access token –¥–ª—è API –ÆMoney")
        return False
    
    headers = {
        "Authorization": f"Bearer {YOOMONEY_ACCESS_TOKEN}",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    
    try:
        response = requests.get(
            f"https://yoomoney.ru/api/operation-history",
            headers=headers,
            params={
                "type": "deposition",
                "label": label,
                "records": 1
            },
            timeout=10
        )
        
        if response.status_code == 200:
            operations = response.json().get("operations", [])
            if operations:
                operation = operations[0]
                return (
                    operation.get("status") == "success" and 
                    float(operation.get("amount")) > 0 and
                    operation.get("label") == label
                )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
    
    return False

def init_db():
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY,
                 username TEXT,
                 balance INTEGER DEFAULT 0,
                 reg_date TEXT,
                 last_active TEXT)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS products
                 (id INTEGER PRIMARY KEY,
                 name TEXT,
                 days INTEGER,
                 price INTEGER,
                 description TEXT)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS keys
                 (id INTEGER PRIMARY KEY,
                 product_id INTEGER,
                 key_text TEXT UNIQUE,
                 used INTEGER DEFAULT 0)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS transactions
                 (id INTEGER PRIMARY KEY,
                 user_id INTEGER,
                 amount INTEGER,
                 type TEXT,
                 date TEXT,
                 status TEXT DEFAULT 'pending',
                 yoomoney_label TEXT)''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    products = [
        (1, "WarChill 1 –¥–µ–Ω—å", 1, 350, "–î–æ—Å—Ç—É–ø –Ω–∞ 1 –¥–µ–Ω—å"),
        (2, "WarChill 7 –¥–Ω–µ–π", 7, 1200, "–î–æ—Å—Ç—É–ø –Ω–∞ 7 –¥–Ω–µ–π")
    ]
    
    for p in products:
        c.execute("INSERT OR IGNORE INTO products VALUES (?, ?, ?, ?, ?)", p)
    
    keys_1day = [
        "KTP4-MWG8-R3N6-XIUO", "PITQ-AZQP-Q5D4-PQQL",
        "JLYG-57H4-V5U1-C483", "RCXL-BWD2-BZHI-XLT1",
        "UCEX-F5X9-KM5A-ZNV1"
    ]
    
    keys_7days = [
        "JU0P-XXJ1-ZWJ8-CEP4", "QK7X-IXS6-9G29-QU0S",
        "RJ6E-ZZLU-2V6R-Q8LT"
    ]
    
    for key in keys_1day:
        c.execute("INSERT OR IGNORE INTO keys (product_id, key_text) VALUES (?, ?)", (1, key))
    
    for key in keys_7days:
        c.execute("INSERT OR IGNORE INTO keys (product_id, key_text) VALUES (?, ?)", (2, key))
    
    conn.commit()
    conn.close()

def generate_yoomoney_link(amount, label):
    return (
        f"https://yoomoney.ru/quickpay/confirm.xml?"
        f"receiver={YOOMONEY_WALLET}&"
        f"quickpay-form=small&"
        f"targets=–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞&"
        f"paymentType=AC&"
        f"sum={amount}&"
        f"label={label}"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect('shop.db')
    
    conn.execute(
        "INSERT OR REPLACE INTO users (user_id, username, reg_date, last_active) VALUES (?, ?, COALESCE((SELECT reg_date FROM users WHERE user_id=?), ?), ?)",
        (user.id, user.username, user.id, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    )
    conn.commit()
    conn.close()
    
    if user.id in ADMIN_IDS:
        await show_admin_panel(update, context)
        return ADMIN_PANEL
    else:
        await show_main_menu(update, context)
        return MAIN_MENU

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect('shop.db')
    balance = conn.execute("SELECT balance FROM users WHERE user_id=?", (user.id,)).fetchone()[0]
    conn.close()
    
    keyboard = [
        [InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ]
    
    if user.id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        f"üí≥ –ë–∞–ª–∞–Ω—Å: {balance} RUB\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    )
    
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    return MAIN_MENU

async def show_shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('shop.db')
    products = conn.execute("SELECT id, name, price, description FROM products").fetchall()
    conn.close()
    
    keyboard = []
    for product in products:
        keyboard.append([InlineKeyboardButton(
            f"{product[1]} - {product[2]} RUB",
            callback_data=f"product_{product[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "üõçÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SHOP

async def show_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    product_id = int(update.callback_query.data.split('_')[1])
    
    conn = sqlite3.connect('shop.db')
    product = conn.execute(
        "SELECT name, price, description FROM products WHERE id=?",
        (product_id,)
    ).fetchone()
    
    keys_available = conn.execute(
        "SELECT COUNT(*) FROM keys WHERE product_id=? AND used=0",
        (product_id,)
    ).fetchone()[0]
    conn.close()
    
    context.user_data['selected_product'] = {
        'id': product_id,
        'name': product[0],
        'price': product[1],
        'description': product[2]
    }
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ÆMoney", callback_data="pay_yoomoney")],
        [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞", callback_data="pay_balance")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_shop")]
    ]
    
    text = (
        f"üéÆ {product[0]}\n\n"
        f"üíµ –¶–µ–Ω–∞: {product[1]} RUB\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product[2]}\n\n"
        f"üîë –ö–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ: {keys_available}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    )
    
    if keys_available == 0:
        text += "\n\n‚ö†Ô∏è –ö–ª—é—á–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_shop")]]
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return PRODUCT_SELECTION

async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    method = update.callback_query.data
    product = context.user_data['selected_product']
    user = update.effective_user
    
    if method == "pay_yoomoney":
        payment_id = f"wc_{user.id}_{int(time.time())}"
        payment_url = generate_yoomoney_link(product['price'], payment_id)
        
        conn = sqlite3.connect('shop.db')
        conn.execute(
            "INSERT INTO transactions (user_id, amount, type, date, status, yoomoney_label) VALUES (?, ?, ?, ?, ?, ?)",
            (user.id, product['price'], "product_purchase", datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "pending", payment_id)
        )
        conn.commit()
        conn.close()
        
        context.user_data['payment_id'] = payment_id
        
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            f"üí≥ –û–ø–ª–∞—Ç–∞ {product['name']}\n\n"
            f"–°—É–º–º–∞: {product['price']} RUB\n\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_url}\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="check_payment")]
            ])
        )
        
    elif method == "pay_balance":
        conn = sqlite3.connect('shop.db')
        balance = conn.execute(
            "SELECT balance FROM users WHERE user_id=?",
            (user.id,)
        ).fetchone()[0]
        
        if balance >= product['price']:
            key = conn.execute(
                "SELECT key_text FROM keys WHERE product_id=? AND used=0 LIMIT 1",
                (product['id'],)
            ).fetchone()
            
            if key:
                conn.execute(
                    "UPDATE users SET balance = balance - ? WHERE user_id=?",
                    (product['price'], user.id)
                )
                
                conn.execute(
                    "UPDATE keys SET used=1 WHERE key_text=?",
                    (key[0],)
                )
                
                conn.execute(
                    "INSERT INTO transactions (user_id, amount, type, date, status) VALUES (?, ?, ?, ?, ?)",
                    (user.id, -product['price'], "balance_purchase", datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "completed")
                )
                
                conn.commit()
                conn.close()
                
                await update.callback_query.answer()
                await update.callback_query.edit_message_text(
                    f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!\n\n"
                    f"–í–∞—à –∫–ª—é—á: {key[0]}\n\n"
                    "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n"
                    "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ WarChill\n"
                    "2. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á\n"
                    "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É\n\n"
                    f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞: {SUPPORT_LINK}"
                )
                
                for admin_id in ADMIN_IDS:
                    try:
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=f"üõí –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞:\n"
                                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
                                 f"–¢–æ–≤–∞—Ä: {product['name']}\n"
                                 f"–ö–ª—é—á: {key[0]}\n"
                                 f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ë–∞–ª–∞–Ω—Å"
                        )
                    except Exception as e:
                        logging.error(f"Error sending to admin {admin_id}: {e}")
            else:
                conn.rollback()
                conn.close()
                await update.callback_query.answer("‚ö†Ô∏è –ö–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!", show_alert=True)
                await show_shop(update, context)
        else:
            conn.close()
            await update.callback_query.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
            await show_balance(update, context)
    
    return MAIN_MENU

async def check_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    payment_id = context.user_data.get('payment_id')
    product = context.user_data['selected_product']
    
    is_paid = check_yoomoney_payment(payment_id)
    
    if is_paid:
        conn = sqlite3.connect('shop.db')
        key = conn.execute(
            "SELECT key_text FROM keys WHERE product_id=? AND used=0 LIMIT 1",
            (product['id'],)
        ).fetchone()
        
        if key:
            conn.execute(
                "UPDATE transactions SET status='completed' WHERE yoomoney_label=?",
                (payment_id,)
            )
            
            conn.execute(
                "UPDATE keys SET used=1 WHERE key_text=?",
                (key[0],)
            )
            
            conn.commit()
            conn.close()
            
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(
                f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
                f"–í–∞—à –∫–ª—é—á: {key[0]}\n\n"
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n"
                "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ WarChill\n"
                "2. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á\n"
                "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É\n\n"
                f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞: {SUPPORT_LINK}"
            )
            
            for admin_id in ADMIN_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=f"üõí –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞:\n"
                             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
                             f"–¢–æ–≤–∞—Ä: {product['name']}\n"
                             f"–ö–ª—é—á: {key[0]}\n"
                             f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ÆMoney"
                    )
                except Exception as e:
                    logging.error(f"Error sending to admin {admin_id}: {e}")
        else:
            conn.rollback()
            conn.close()
            await update.callback_query.answer("‚ö†Ô∏è –ö–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!", show_alert=True)
            await show_shop(update, context)
    else:
        await update.callback_query.answer("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
    
    return MAIN_MENU

async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect('shop.db')
    balance = conn.execute("SELECT balance FROM users WHERE user_id=?", (user.id,)).fetchone()[0]
    conn.close()
    
    keyboard = [
        [InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å (+100 RUB)", callback_data="topup_100")],
        [InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å (+500 RUB)", callback_data="topup_500")],
        [InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å (+1000 RUB)", callback_data="topup_1000")],
        [InlineKeyboardButton("üíµ –°–≤–æ—è —Å—É–º–º–∞", callback_data="custom_topup")],
        [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="history")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} RUB\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return BALANCE

async def process_topup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query.data == "custom_topup":
        context.user_data['awaiting_topup_amount'] = True
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç 10 –¥–æ 15000 RUB):"
        )
        return CUSTOM_TOPUP
    
    amount = int(update.callback_query.data.split('_')[1])
    await create_topup(update, context, amount)

async def handle_custom_topup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_topup_amount'):
        try:
            amount = int(update.message.text)
            if 10 <= amount <= 15000:
                await create_topup(update, context, amount)
                context.user_data['awaiting_topup_amount'] = False
            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 15000 RUB. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
        except ValueError:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):"
            )
        return CUSTOM_TOPUP

async def create_topup(update: Update, context: ContextTypes.DEFAULT_TYPE, amount: int):
    user = update.effective_user
    payment_id = f"topup_{user.id}_{int(time.time())}"
    
    payment_url = generate_yoomoney_link(amount, payment_id)
    
    conn = sqlite3.connect('shop.db')
    conn.execute(
        "INSERT INTO transactions (user_id, amount, type, date, status, yoomoney_label) VALUES (?, ?, ?, ?, ?, ?)",
        (user.id, amount, "balance_topup", datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "pending", payment_id)
    )
    conn.commit()
    conn.close()
    
    context.user_data['payment_id'] = payment_id
    
    if hasattr(update, 'callback_query'):
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            f"üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} RUB\n\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_url}\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="check_topup")]
            ])
        )
    else:
        await update.message.reply_text(
            f"üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} RUB\n\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_url}\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="check_topup")]
            ])
        )

async def check_topup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    payment_id = context.user_data.get('payment_id')
    
    is_paid = check_yoomoney_payment(payment_id)
    
    if is_paid:
        conn = sqlite3.connect('shop.db')
        
        amount = conn.execute(
            "SELECT amount FROM transactions WHERE yoomoney_label=?",
            (payment_id,)
        ).fetchone()[0]
        
        conn.execute(
            "UPDATE users SET balance = balance + ? WHERE user_id=?",
            (amount, user.id)
        )
        
        conn.execute(
            "UPDATE transactions SET status='completed' WHERE yoomoney_label=?",
            (payment_id,)
        )
        
        conn.commit()
        balance = conn.execute("SELECT balance FROM users WHERE user_id=?", (user.id,)).fetchone()[0]
        conn.close()
        
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} RUB!\n\n"
            f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} RUB"
        )
        
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:\n"
                         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
                         f"–°—É–º–º–∞: {amount} RUB\n"
                         f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance} RUB"
                )
            except Exception as e:
                logging.error(f"Error sending to admin {admin_id}: {e}")
    else:
        await update.callback_query.answer("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
    
    return MAIN_MENU

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect('shop.db')
    transactions = conn.execute(
        "SELECT amount, type, date FROM transactions WHERE user_id=? ORDER BY date DESC LIMIT 10",
        (user.id,)
    ).fetchall()
    conn.close()
    
    history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n\n"
    for t in transactions:
        history_text += f"{t[2]} | {t[1]} | {t[0]} RUB\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_balance")]]
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        history_text if transactions else "üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect('shop.db')
    profile = conn.execute(
        "SELECT balance, reg_date, last_active FROM users WHERE user_id=?",
        (user.id,)
    ).fetchone()
    conn.close()
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_profile")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üÜî ID: {user.id}\n"
        f"üë§ –ò–º—è: {user.full_name}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {profile[0]} RUB\n"
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {profile[1]}\n"
        f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {profile[2]}\n\n"
        f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞: {SUPPORT_LINK}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return PROFILE

async def show_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì® –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="contact_support")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        f"üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ {SUPPORT_LINK}\n\n"
        "–ú—ã –¥–æ—Å—Ç—É–ø–Ω—ã 24/7 –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SUPPORT

async def contact_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['awaiting_support_msg'] = True
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:"
    )

async def handle_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_support_msg'):
        user = update.effective_user
        msg = update.message.text
        
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username} (ID: {user.id}):\n\n{msg}"
                )
            except Exception as e:
                logging.error(f"Error sending to admin {admin_id}: {e}")
        
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n"
            "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        context.user_data['awaiting_support_msg'] = False
        await show_main_menu(update, context)
        return MAIN_MENU

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_products")],
        [InlineKeyboardButton("üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏", callback_data="admin_keys")],
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton("üí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="admin_transactions")],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_PANEL

async def show_admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('shop.db')
    
    users_count = conn.execute("SELECT COUNT(*) FROM users").fetchone()[0]
    active_users = conn.execute("SELECT COUNT(*) FROM users WHERE last_active > datetime('now', '-7 day')").fetchone()[0]
    transactions_count = conn.execute("SELECT COUNT(*) FROM transactions").fetchone()[0]
    total_income = conn.execute("SELECT SUM(amount) FROM transactions WHERE amount > 0").fetchone()[0] or 0
    
    keys_available = conn.execute("SELECT p.name, COUNT(k.id) FROM keys k JOIN products p ON k.product_id = p.id WHERE k.used=0 GROUP BY p.id").fetchall()
    
    conn.close()
    
    stats_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
        f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): {active_users}\n"
        f"üí∏ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {transactions_count}\n"
        f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income} RUB\n\n"
        "üîë –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:\n"
    )
    
    for key in keys_available:
        stats_text += f"- {key[0]}: {key[1]} —à—Ç.\n"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        stats_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_STATS

async def show_admin_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('shop.db')
    products = conn.execute("SELECT id, name, price, description FROM products").fetchall()
    conn.close()
    
    keyboard = []
    for product in products:
        keyboard.append([InlineKeyboardButton(
            f"{product[1]} - {product[2]} RUB",
            callback_data=f"edit_product_{product[0]}"
        )])
    
    keyboard.extend([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ])
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_PRODUCTS

async def show_admin_keys(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('shop.db')
    products = conn.execute("SELECT id, name FROM products").fetchall()
    conn.close()
    
    keyboard = []
    for product in products:
        keyboard.append([InlineKeyboardButton(
            f"üîë {product[1]}",
            callback_data=f"manage_keys_{product[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_KEYS

async def manage_product_keys(update: Update, context: ContextTypes.DEFAULT_TYPE):
    product_id = int(update.callback_query.data.split('_')[2])
    
    conn = sqlite3.connect('shop.db')
    product = conn.execute("SELECT name FROM products WHERE id=?", (product_id,)).fetchone()
    keys = conn.execute(
        "SELECT key_text, used FROM keys WHERE product_id=? ORDER BY used",
        (product_id,)
    ).fetchall()
    conn.close()
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–∏", callback_data=f"add_keys_{product_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_keys")]
    ]
    
    keys_text = f"üîë –ö–ª—é—á–∏ –¥–ª—è {product[0]}:\n\n"
    for key in keys:
        keys_text += f"{'‚úÖ' if not key[1] else '‚ùå'} {key[0]}\n"
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        keys_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query.data in ["back_to_admin", "back_to_keys", "back_to_stats"]:
        await show_admin_panel(update, context)
        return ADMIN_PANEL
    elif update.callback_query.data == "back_to_shop":
        await show_shop(update, context)
        return SHOP
    elif update.callback_query.data == "back_to_balance":
        await show_balance(update, context)
        return BALANCE
    else:
        await show_main_menu(update, context)
        return MAIN_MENU

def main() -> None:
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –ÆMoney –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    yoomoney_auth()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(show_shop, pattern="^shop$"),
                CallbackQueryHandler(show_profile, pattern="^profile$"),
                CallbackQueryHandler(show_balance, pattern="^balance$"),
                CallbackQueryHandler(show_support, pattern="^support$"),
                CallbackQueryHandler(show_admin_panel, pattern="^admin_panel$"),
                CallbackQueryHandler(handle_back, pattern="^back$")
            ],
            SHOP: [
                CallbackQueryHandler(show_product, pattern="^product_"),
                CallbackQueryHandler(handle_back, pattern="^back$")
            ],
            PRODUCT_SELECTION: [
                CallbackQueryHandler(process_payment, pattern="^pay_"),
                CallbackQueryHandler(check_payment, pattern="^check_payment$"),
                CallbackQueryHandler(handle_back, pattern="^back_to_shop$")
            ],
            BALANCE: [
                CallbackQueryHandler(process_topup, pattern="^topup_"),
                CallbackQueryHandler(check_topup, pattern="^check_topup$"),
                CallbackQueryHandler(show_history, pattern="^history$"),
                CallbackQueryHandler(handle_back, pattern="^back$"),
                CallbackQueryHandler(handle_back, pattern="^back_to_balance$")
            ],
            CUSTOM_TOPUP: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_topup),
                CallbackQueryHandler(handle_back, pattern="^back$")
            ],
            PROFILE: [
                CallbackQueryHandler(handle_back, pattern="^back$")
            ],
            SUPPORT: [
                CallbackQueryHandler(contact_support, pattern="^contact_support$"),
                CallbackQueryHandler(handle_back, pattern="^back$")
            ],
            ADMIN_PANEL: [
                CallbackQueryHandler(show_admin_stats, pattern="^admin_stats$"),
                CallbackQueryHandler(show_admin_products, pattern="^admin_products$"),
                CallbackQueryHandler(show_admin_keys, pattern="^admin_keys$"),
                CallbackQueryHandler(handle_back, pattern="^back_to_menu$")
            ],
            ADMIN_STATS: [
                CallbackQueryHandler(show_admin_stats, pattern="^admin_stats$"),
                CallbackQueryHandler(handle_back, pattern="^back_to_admin$")
            ],
            ADMIN_PRODUCTS: [
                CallbackQueryHandler(handle_back, pattern="^back_to_admin$")
            ],
            ADMIN_KEYS: [
                CallbackQueryHandler(manage_product_keys, pattern="^manage_keys_"),
                CallbackQueryHandler(handle_back, pattern="^back_to_admin$"),
                CallbackQueryHandler(handle_back, pattern="^back_to_keys$")
            ]
        },
        fallbacks=[CommandHandler("start", start)],
        per_message=False
    )
    
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_support_message))
    application.run_polling()

if __name__ == "__main__":
    main()
